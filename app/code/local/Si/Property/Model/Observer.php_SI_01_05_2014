<?php
class Si_Property_Model_Observer
{
	public function catalogProductLoadAfter(Varien_Event_Observer $observer)
	{
		$action = Mage::app()->getFrontController()->getAction();
		if ($action->getFullActionName() == 'checkout_cart_add')
		{
			$product = $observer->getProduct();
			if($product->getAttributeSetId() == 9) {
				$additionalOptions = array();
				// assuming you are posting your custom form values in an array called extra_options...
				if ($options = $action->getRequest()->getParam('checkin')) {
					// add to the additional options array
					if ($additionalOption = $product->getCustomOption('checkin')) {
						$additionalOptions = (array) unserialize($additionalOption->getValue());
					}
					foreach ($options as $key => $value) {
						$additionalOptions[] = array(
							'label' => $key,
							'value' => $value,
						);
					}
				}
				if ($options = $action->getRequest()->getParam('checkout')) {
					// add to the additional options array
					if ($additionalOption = $product->getCustomOption('checkout')) {
						$additionalOptions = (array) unserialize($additionalOption->getValue());
					}
					foreach ($options as $key => $value) {
						$additionalOptions[] = array(
							'label' => $key,
							'value' => $value,
						);
					}
				}
				if ($options = $action->getRequest()->getParam('accommodate')) {
					// add to the additional options array
					if ($additionalOption = $product->getCustomOption('accommodate')) {
						$additionalOptions = (array) unserialize($additionalOption->getValue());
					}
					foreach ($options as $key => $value) {
						$additionalOptions[] = array(
							'label' => $key,
							'value' => $value,
						);
					}
				}
				// add the additional options array with the option code additional_options
				$product->addCustomOption('additional_options', serialize($additionalOptions));
			}
		}
	}

	public function salesConvertQuoteItemToOrderItem(Varien_Event_Observer $observer)
	{
		$quoteItem = $observer->getItem();
		if ($additionalOptions = $quoteItem->getOptionByCode('additional_options')) {
			$orderItem = $observer->getOrderItem();
			$options = $orderItem->getProductOptions();
			$options['additional_options'] = unserialize($additionalOptions->getValue());
			$orderItem->setProductOptions($options);
		}
	}

	public function checkoutCartProductAddAfter(Varien_Event_Observer $observer)
	{
		$action = Mage::app()->getFrontController()->getAction();
	    if ($action->getFullActionName() == 'sales_order_reorder')
	    {
	        $item = $observer->getQuoteItem();
	        $buyInfo = $item->getBuyRequest();
	        if ($options = $buyInfo->getMchart())
	        {
	            $additionalOptions = array();
	            if ($additionalOption = $item->getOptionByCode('additional_options'))
	            {
	                $additionalOptions = (array) unserialize($additionalOption->getValue());
	            }
	            foreach ($options as $key => $value)
	            {
	                $additionalOptions[] = array(
	                    'label' => $key,
	                    'value' => $value,
	                );
	            }
	            $item->addOption(array(
	                'code' => 'additional_options',
	                'value' => serialize($additionalOptions)
	            ));
	        }
	    }
	}
	public function checkoutCartSaveBefore(Varien_Event_Observer $observer)
	{
		//echo '<pre>'; print_r($observer); echo '</pre>'; exit;
		$cart = $observer->getEvent()->getCart();
		foreach($cart->getQuote()->getAllItems() as $item) {
        	$options = $item->getProduct()->getCustomOptions();
			$data = array();
			if($item->getProduct()->getAttributeSetId() == 9) {
				$additionalOptions = array();
				if (isset($options['checkin'])) {
					$data['checkin'] = $options['checkin']->getValue();	
			        $additionalOptions[] = array(
						 'code' => 'additional_options',
						 'label' => 'Checkin',
						 'value' => $data['checkin']
						);
				}
				if (isset($options['checkout'])) {
					$data['checkout'] = $options['checkout']->getValue();	
			        $additionalOptions[] = array(
						 'code' => 'additional_options',
						 'label' => 'Checkout',
						 'value' => $data['checkout']
						);
				}
				if (isset($options['accommodate'])) {
					$data['accommodate'] = $options['accommodate']->getValue();	
			        $additionalOptions[] = array(
						 'code' => 'additional_options',
						 'label' => 'Accommodate',
						 'value' => $data['accommodate']
						);
				}
				$item->addOption(array(
				  'code' => 'additional_options',
				  'value' => serialize($additionalOptions),
				));
			}
        }
	}
	
	public function processBookingAfterCheckout(Varien_Event_Observer $observer)
	{
		$resource = Mage::getSingleton('core/resource');
		$write = $resource->getConnection('core_write');
     	$table = $resource->getTableName('sales_flat_quote_item_option');
     	$table2 = $resource->getTableName('property_availability');
     	
		$order = $observer->getEvent()->getOrder();
		$quote = $observer->getEvent()->getQuote();
		
		$cartItems = $quote->getAllVisibleItems();
		foreach ($cartItems as $item) {
		    //Mage::log('QuoteId: ' .$quote->getId() . '  QuoteItem: ' .$item->getItemId());
		    $getCheckinSql = "SELECT value FROM ".$table." WHERE item_id = '".$item->getItemId()."' AND code = 'checkin'";
		    $checkin = $write->fetchOne($getCheckinSql);
		    $getCheckoutSql = "SELECT value FROM ".$table." WHERE item_id = '".$item->getItemId()."' AND code = 'checkout'";
		    $checkout = $write->fetchOne($getCheckoutSql);
		    
		    if(Mage::getStoreConfig('property_section/general/enable')) { // check property function enable
		    	
		    	$start = strtotime($checkin);
                $end = strtotime($checkout);
                $daysBetween = ceil(abs($end - $start) / 86400);
                for($i=0; $i<$daysBetween; $i++) {
					$day = date('d',strtotime($checkin . "+$i days"));
					$month = date('n',strtotime($checkin . "+$i days"));
					$year = date('Y',strtotime($checkin . "+$i days"));
					
					/***** add/update block/availability date starts *****/
					$data = array(
								'product_id' => $item->getProductId(),
								'booking_type' => 2,
								'booking_year' => $year,
								'booking_month' => $month,
								'created_at' => now(),
								'update_at' => now(),
							);
					$checkCollection = Mage::getModel('property/propertyavailablity')->getCollection()
										->addFieldToFilter('booking_year', $year)
										->addFieldToFilter('booking_month', $month);
					if($checkCollection->count() > 0) {
						foreach ($checkCollection as $_check) {
							//Mage::log('Check: ' . $_check->getAvailableId());
							$availableId = $_check->getAvailableId();
							break;
						}
						
						$available = Mage::getModel('property/propertyavailablity')->load($availableId);
						$preBlockDate = $available->getBlockDate() . ',' . $day;
						//Mage::log('Block date: ' . $preBlockDate);
						$model = Mage::getModel('property/propertyavailablity');		
						$model->setData($data)
							->setId($availableId);
						$model->setBlockDate($preBlockDate);
						$model->save();
						
					} else {
						$available = Mage::getModel('property/propertyavailablity');
						$available->setData($data);
						$available->setBlockDate($day);
						$available->save();
					}
					/***** add/update block/availability date ends *****/
					
                }

				/*$fromdate =  date("Y-m-d", strtotime($checkin));
				$todateVal = date("Y-m-d", strtotime($checkout));
				$dateArr=explode("-",$todateVal);
				$todate=date('Y-m-d', mktime(0, 0, 0, $dateArr[1], $dateArr[2] - 1, $dateArr[0]));*/
		    }
		}
	}
}
